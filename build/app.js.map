{"version":3,"sources":["../src/app.js"],"names":["app","port","process","env","PORT","set","use","bodyParser","urlencoded","extended","json","express","path","join","__dirname","secret","resave","saveUninitialized","req","res","next","session","account","Account","findById","_id","then","acount","err","console","log","locals","isAuthenticated","isLoggedIn","staticRoutes","apiRoutes","mongoose","connect","MONGODB_URI","useNewUrlParser","useUnifiedTopology","result","listen","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;;;AAEA,IAAMA,GAAG,GAAG,0BAAZ;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC,C,CACA;AACA;AACA;AACA;AACA;;AAEAD,sBAAIA,GAAJ,G,CAEA;AACA;AACA;;;AAEAH,GAAG,CAACK,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACAL,GAAG,CAACK,GAAJ,CAAQ,OAAR,EAAiB,OAAjB;AAEAL,GAAG,CAACM,GAAJ,CAAQC,uBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAT,GAAG,CAACM,GAAJ,CAAQC,uBAAWG,IAAX,EAAR;AACAV,GAAG,CAACM,GAAJ,CAAQK,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;AACAd,GAAG,CAACM,GAAJ,CAAQ,+BAAR;AACAN,GAAG,CAACM,GAAJ,CACE,gCAAQ;AACNS,EAAAA,MAAM,EAAE,wBADF;AAENC,EAAAA,MAAM,EAAE,KAFF;AAGNC,EAAAA,iBAAiB,EAAE,KAHb,CAIN;;AAJM,CAAR,CADF;AASAjB,GAAG,CAACM,GAAJ,CAAQ,UAACY,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAI,CAACF,GAAG,CAACG,OAAJ,CAAYC,OAAjB,EAA0B,OAAOF,IAAI,EAAX;;AAC1BG,sBAAQC,QAAR,CAAiBN,GAAG,CAACG,OAAJ,CAAYC,OAAZ,CAAoBG,GAArC,EACGC,IADH,CACQ,UAAAJ,OAAO,EAAI;AACfJ,IAAAA,GAAG,CAACS,MAAJ,GAAaL,OAAb;AACAF,IAAAA,IAAI;AACL,GAJH,WAKS,UAAAQ,GAAG,EAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BF,GAA3C;AACD,GAPH;AAQD,CAVD;AAYA5B,GAAG,CAACM,GAAJ,CAAQ,UAACY,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,EAAAA,GAAG,CAACY,MAAJ,CAAWC,eAAX,GAA6Bd,GAAG,CAACG,OAAJ,CAAYY,UAAzC;AACAd,EAAAA,GAAG,CAACY,MAAJ,CAAWT,OAAX,GAAqBJ,GAAG,CAACG,OAAJ,CAAYC,OAAjC;AACAF,EAAAA,IAAI;AACL,CAJD;AAMApB,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAa4B,kBAAb;AACAlC,GAAG,CAACM,GAAJ,CAAQ,MAAR,EAAgB6B,eAAhB;;AAEAC,qBACGC,OADH,CACWnC,OAAO,CAACC,GAAR,CAAYmC,WADvB,EACoC;AAChCC,EAAAA,eAAe,EAAE,IADe;AAEhCC,EAAAA,kBAAkB,EAAE;AAFY,CADpC,EAKGd,IALH,CAKQ,UAAAe,MAAM,EAAI;AACdzC,EAAAA,GAAG,CAAC0C,MAAJ,CAAWzC,IAAX,EAAiB,YAAM;AACrB4B,IAAAA,OAAO,CAACC,GAAR,2CAA+C7B,IAA/C;AACD,GAFD;AAGD,CATH,WAUS,UAAA2B,GAAG,EAAI;AACZC,EAAAA,OAAO,CAACc,KAAR,CAAc,wCAAwCf,GAAtD;AACD,CAZH;;eAce5B,G","sourcesContent":["import express from \"express\";\nimport env from \"custom-env\";\nimport bodyParser from \"body-parser\";\nimport mongoose from \"mongoose\";\nimport mongodb from \"mongodb\";\nimport path from \"path\";\nimport session from \"express-session\";\nimport MongoDBSession from \"connect-mongodb-session\";\nimport flashMessages from \"connect-flash\";\n\nimport apiRoutes from \"./routes/api.routes\";\nimport staticRoutes from \"./routes/static.routes\";\n\nimport Account from \"./models/account.model\";\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n// const MongoDBStore = MongoDBSession(session);\n// const store = new MongoDBStore({\n//   uri: process.env.MONGODB_URI,\n//   collection: \"sessions\"\n// });\n\nenv.env();\n\n// store.on(\"error\", function(error) {\n//   console.log(error);\n// });\n\napp.set(\"view engine\", \"ejs\");\napp.set(\"views\", \"views\");\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use(express.static(path.join(__dirname, \"../public\")));\napp.use(flashMessages());\napp.use(\n  session({\n    secret: \"Long ID should be here\",\n    resave: false,\n    saveUninitialized: false\n    // store: store\n  })\n);\n\napp.use((req, res, next) => {\n  if (!req.session.account) return next();\n  Account.findById(req.session.account._id)\n    .then(account => {\n      req.acount = account;\n      next();\n    })\n    .catch(err => {\n      console.log(\"ERR: Could not find User, \" + err);\n    });\n});\n\napp.use((req, res, next) => {\n  res.locals.isAuthenticated = req.session.isLoggedIn;\n  res.locals.account = req.session.account;\n  next();\n});\n\napp.use(\"/\", staticRoutes);\napp.use(\"/api\", apiRoutes);\n\nmongoose\n  .connect(process.env.MONGODB_URI, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true\n  })\n  .then(result => {\n    app.listen(port, () => {\n      console.log(`CE Management Server running on ${port}`);\n    });\n  })\n  .catch(err => {\n    console.error(\"ERR: Could not connect to MongoDB, \" + err);\n  });\n\nexport default app;\n"],"file":"app.js"}