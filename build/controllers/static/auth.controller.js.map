{"version":3,"sources":["../../../src/controllers/static/auth.controller.js"],"names":["authController","req","res","render","title","Member","find","then","members","body","member","username","password","confirmPassword","Account","findOne","userDoc","flash","redirect","bcrypt","hash","hashedPassword","account","save","result","err","console","log","user","auth","findAccount","acc","passwordIsValid","session","isLoggedIn","firstname","lastname","errorMessage","oldInput","email","destroy"],"mappings":"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","sourcesContent":["import Account from \"../../models/account.model\";\nimport auth from \"../../helpers/auth\";\nimport bcrypt from \"bcryptjs\";\nimport memberController from \"./member.controller\";\nimport Member from \"../../models/member.model\";\n\nclass authController {\n  static getLoginPage(req, res) {\n    res.render(\"auth/login\", { title: \"Login\" });\n  }\n  static getSignupPage(req, res) {\n    Member.find().then(members =>\n      res.render(\"auth/register\", {\n        title: \"Register Account\",\n        members: members\n      })\n    );\n  }\n\n  static signup(req, res) {\n    const { member, username, password, confirmPassword } = req.body;\n    Account.findOne({ username: username })\n      .then(userDoc => {\n        if (userDoc) {\n          req.flash(\"error\", \"Username is used by another user\");\n          return res.redirect(\"signup\");\n        }\n        return bcrypt.hash(password, 12).then(hashedPassword => {\n          const account = new Account({\n            username: username,\n            member: member,\n            password: hashedPassword\n          });\n          return account.save();\n        });\n      })\n      .then(result => {\n        return res.redirect(\"/login\");\n      })\n      .catch(err => console.log(\"ERR: Could not signup user, \" + user));\n  }\n\n  static login(req, res) {\n    const { username, password } = req.body;\n    const account = auth.findAccount(username);\n    account.then(acc => {\n      if (auth.passwordIsValid(password, acc.password)) {\n        req.session.isLoggedIn = true;\n        req.session.account = acc.member.firstname + \" \" + acc.member.lastname;\n        return res.redirect(\"/admin\");\n      } else {\n        return res.render(\"auth/login\", {\n          errorMessage: \"Invalid Username or Password\",\n          oldInput: { email: username }\n        });\n      }\n    });\n  }\n\n  static logout(req, res) {\n    req.session.destroy(err => {\n      res.redirect(\"/login\");\n    });\n  }\n}\n\nexport default authController;\n"],"file":"auth.controller.js"}